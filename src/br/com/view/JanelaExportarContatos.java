/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.view;

import br.com.dao.ContatoDao;
import br.com.dao.TelefoneDao;
import br.com.dao.TipoContatoDao;
import br.com.daoImpl.ContatoDaoImpl;
import br.com.daoImpl.TelefoneDaoImpl;
import br.com.daoImpl.TipoContatoDaoImpl;
import br.com.entidade.Contato;
import br.com.entidade.Telefone;
import br.com.entidade.TipoContato;
import java.awt.HeadlessException;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author WILL
 */
public class JanelaExportarContatos extends javax.swing.JFrame {

    public static ContatoDao contatoDao = new ContatoDaoImpl();
    public static TelefoneDao telefoneDao = new TelefoneDaoImpl();
    public static TipoContatoDao tipoContatoDao = new TipoContatoDaoImpl();

    /**
     * Creates new form JanelaExportarContatos
     */
    public JanelaExportarContatos() {
        initComponents();
        try {

            List<TipoContato> tipoContatos = (List<TipoContato>) (Object) tipoContatoDao.pesquisarTodos();
            adicionarListaTipoContatosTabela(tipoContatos);
        } catch (Exception exception) {
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        painelTabela = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaTipoTelefone = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        checkBoxNormal = new javax.swing.JCheckBox();
        checkboxTipo = new javax.swing.JCheckBox();
        checkboxTipoENome = new javax.swing.JCheckBox();
        textoTipoExportacao = new javax.swing.JLabel();
        bottonExportar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        tabelaTipoTelefone.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "ID", "TIPO DE TELEFONE"
            }
        ));
        tabelaTipoTelefone.setPreferredSize(null);
        jScrollPane1.setViewportView(tabelaTipoTelefone);

        javax.swing.GroupLayout painelTabelaLayout = new javax.swing.GroupLayout(painelTabela);
        painelTabela.setLayout(painelTabelaLayout);
        painelTabelaLayout.setHorizontalGroup(
            painelTabelaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelTabelaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        painelTabelaLayout.setVerticalGroup(
            painelTabelaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelTabelaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(painelTabela, new java.awt.GridBagConstraints());

        jPanel1.setLayout(new java.awt.GridBagLayout());

        checkBoxNormal.setText("Normal");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanel1.add(checkBoxNormal, gridBagConstraints);

        checkboxTipo.setText("Filtrado por Tipo");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanel1.add(checkboxTipo, gridBagConstraints);

        checkboxTipoENome.setText("Filtrado por Tipo e Ordenado por nome");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanel1.add(checkboxTipoENome, gridBagConstraints);

        textoTipoExportacao.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        textoTipoExportacao.setText("Tipos de Exportação");
        textoTipoExportacao.setPreferredSize(new java.awt.Dimension(12040, 12040));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(11, 0, 11, 0);
        jPanel1.add(textoTipoExportacao, gridBagConstraints);

        bottonExportar.setText("Exportar");
        bottonExportar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bottonExportarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(4, 3, 4, 3);
        jPanel1.add(bottonExportar, gridBagConstraints);

        getContentPane().add(jPanel1, new java.awt.GridBagConstraints());

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bottonExportarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bottonExportarActionPerformed
        if (checkBoxNormal.isSelected() && checkboxTipo.isSelected() && checkboxTipoENome.isSelected()) {
            JOptionPane.showMessageDialog(this, "Selecione apenas um dos campos!");
            return;
        }
        if (checkBoxNormal.isSelected() && checkboxTipo.isSelected()) {
            JOptionPane.showMessageDialog(this, "Selecione apenas um dos campos!");
            return;
        }
        if (checkBoxNormal.isSelected() && checkboxTipoENome.isSelected()) {
            JOptionPane.showMessageDialog(this, "Selecione apenas um dos campos!");
            return;
        }
        if (checkboxTipo.isSelected() && checkboxTipoENome.isSelected()) {
            JOptionPane.showMessageDialog(this, "Selecione apenas um dos campos!");
            return;
        }
        if (checkBoxNormal.isSelected()) {
            seForNormal();
        }
        if (checkboxTipo.isSelected()) {

            int linha = tabelaTipoTelefone.getSelectedRow();
            if (linha >= 0) {
                String campoSelecionado = (String) tabelaTipoTelefone.getValueAt(linha, 0);
                Integer campoIdTipoContatoSelecionado = Integer.valueOf(campoSelecionado);

                try {

                    String mensagem = null;
                    List<TipoContato> TIPOCONTATO = (List<TipoContato>) (Object) tipoContatoDao.pesquisarTodos();
                    for (int i = 0; i < TIPOCONTATO.size(); i++) {
                        TipoContato get = TIPOCONTATO.get(i);
                    }
                    seForNormalComFiltroDeTipo(campoIdTipoContatoSelecionado);
                } catch (Exception exception) {
                }

            }
        }
        if (checkboxTipoENome.isSelected()) {

            int linhaTipo = tabelaTipoTelefone.getSelectedRow();
            if (linhaTipo >= 0) {
                String campoSelecionadoTipo = (String) tabelaTipoTelefone.getValueAt(linhaTipo, 0);
                Integer campoIdTipoContatoSelecionado = Integer.valueOf(campoSelecionadoTipo);

                try {
                    String mensagem = null;
                    Integer id = null;
                    List<TipoContato> TIPOCONTATO = (List<TipoContato>) (Object) tipoContatoDao.pesquisarTodos();
                    for (int i = 0; i < TIPOCONTATO.size(); i++) {
                        TipoContato get = TIPOCONTATO.get(i);
                    }
                    seForNormalComFiltroDeTipoOrdenadoPorNome(campoIdTipoContatoSelecionado);
                } catch (Exception exception) {
                }

            }
        }


    }//GEN-LAST:event_bottonExportarActionPerformed

    public void seForNormal() throws HeadlessException {
        // TODO add your handling code here:

        JFileChooser chooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
                "Arquivo Csv - Excel 2007 ou Inferior", "csv");
        chooser.setFileFilter(filter);
        int returnVal = chooser.showSaveDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            String nomeArquivo = chooser.getSelectedFile().getName();
            String enderecoArquivo = chooser.getSelectedFile().getPath();

            try {
                String impressao = transformandoEmListaSimples();
                br.com.utilpacket.Util_Arquivo.escreverArq(enderecoArquivo + ".csv", impressao);

            } catch (Exception exception) {
            }

        }
    }

    public void seForNormalComFiltroDeTipo(Integer id) throws HeadlessException {
        // TODO add your handling code here:

        JFileChooser chooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
                "Arquivo Csv - Excel 2007 ou Inferior", "csv");
        chooser.setFileFilter(filter);
        int returnVal = chooser.showSaveDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            String nomeArquivo = chooser.getSelectedFile().getName();
            String enderecoArquivo = chooser.getSelectedFile().getPath();

            try {
                String impressao = transformandoEmListaSimplesComFiltroDeTipo(id);
                br.com.utilpacket.Util_Arquivo.escreverArq(enderecoArquivo + ".csv", impressao);

            } catch (Exception exception) {
            }

        }
    }

    public void seForNormalComFiltroDeTipoOrdenadoPorNome(Integer id) throws HeadlessException {
        // TODO add your handling code here:

        JFileChooser chooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
                "Arquivo Csv - Excel 2007 ou Inferior", "csv");
        chooser.setFileFilter(filter);
        int returnVal = chooser.showSaveDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            String nomeArquivo = chooser.getSelectedFile().getName();
            String enderecoArquivo = chooser.getSelectedFile().getPath();

            try {
                String impressao = transformandoEmListaSimplesComFiltroDeTipoOrdenadoPorNome(id);
                br.com.utilpacket.Util_Arquivo.escreverArq(enderecoArquivo + ".csv", impressao);

            } catch (Exception exception) {
            }

        }
    }

    public static String transformandoEmListaSimples() throws Exception {
        // Opcao 1 //

        String impressao = new String();
        List<Contato> CONTATOS = (List<Contato>) (Object) contatoDao.pesquisarTodos();
        for (int i = 0; i < CONTATOS.size(); i++) {
            Contato get = CONTATOS.get(i);
            List<Telefone> TELEFONES_DO_CONTATO = telefoneDao.pesquisarTelefoneContatos(get);
            for (int j = 0; j < TELEFONES_DO_CONTATO.size(); j++) {
                Telefone telContato = TELEFONES_DO_CONTATO.get(j);
                impressao = impressao + get.getNome() + ";" + get.getEmail() + ";" + get.getNascimento() + ";" + get.getTipoContato().getNome() + ";" + "(" + telContato.getDdd() + ")" + telContato.getNumero() + ";\r\n";
            }
        }
        return impressao;

    }

    public static String transformandoEmListaSimplesComFiltroDeTipo(Integer id) throws Exception {
        // Opcao 1 //
        String impressao = new String();

        List<Object> object = contatoDao.pesquisarTodosPorTipo(id);
        for (int i = 0; i < object.size(); i++) {
            Contato get = (Contato) object.get(i);
            List<Telefone> TELEFONES_DO_CONTATO = telefoneDao.pesquisarTelefoneContatos(get);
            for (int j = 0; j < TELEFONES_DO_CONTATO.size(); j++) {
                Telefone telContato = TELEFONES_DO_CONTATO.get(j);
                impressao = impressao + get.getNome() + ";" + get.getEmail() + ";" + get.getNascimento() + ";" + get.getTipoContato().getNome() + ";" + "(" + telContato.getDdd() + ")" + telContato.getNumero() + ";\r\n";
            }
        }

        return impressao;
    }

    public static String transformandoEmListaSimplesComFiltroDeTipoOrdenadoPorNome(Integer id) throws Exception {
        // Opcao 1 //
        String impressao = new String();
        List<Object> object = contatoDao.pesquisarTodosPorTipoOrdenadoPorNome(id);
        for (int i = 0; i < object.size(); i++) {
            Contato get = (Contato) object.get(i);
            List<Telefone> TELEFONES_DO_CONTATO = telefoneDao.pesquisarTelefoneContatos(get);
            for (int j = 0; j < TELEFONES_DO_CONTATO.size(); j++) {
                Telefone telContato = TELEFONES_DO_CONTATO.get(j);
                impressao = impressao + get.getNome() + ";" + get.getEmail() + ";" + get.getNascimento() + ";" + get.getTipoContato().getNome() + ";" + "(" + telContato.getDdd() + ")" + telContato.getNumero() + ";\r\n";
            }
        }
        return impressao;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JanelaExportarContatos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JanelaExportarContatos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JanelaExportarContatos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JanelaExportarContatos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JanelaExportarContatos().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bottonExportar;
    private javax.swing.JCheckBox checkBoxNormal;
    private javax.swing.JCheckBox checkboxTipo;
    private javax.swing.JCheckBox checkboxTipoENome;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel painelTabela;
    private javax.swing.JTable tabelaTipoTelefone;
    private javax.swing.JLabel textoTipoExportacao;
    // End of variables declaration//GEN-END:variables
public void adicionarListaTipoContatosTabela(List<TipoContato> tipoContatos) {
        String[] colunas = {"Codigo", "TipoContato"};
        String[][] dados = new String[tipoContatos.size()][colunas.length];
        for (int i = 0; i < tipoContatos.size(); i++) {
            TipoContato tc = tipoContatos.get(i);
            dados[i][0] = tc.getId().toString();
            dados[i][1] = tc.getNome();
        }
        DefaultTableModel modelo = new DefaultTableModel(dados, colunas);
        tabelaTipoTelefone.setModel(modelo);
    }
}
